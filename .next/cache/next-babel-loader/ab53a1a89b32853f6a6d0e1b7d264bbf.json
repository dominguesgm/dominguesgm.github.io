{"ast":null,"code":"var generateVectors = function generateVectors(number, zDepth, peak) {\n  var vectors = [];\n\n  for (var i = 0; i < number; i++) {\n    var tempX = (Math.random() - 0.5) * 0.1;\n    var tempY = Math.random() * (i % 2 === 0 ? 1 : -1);\n    var tempZ = -zDepth / (peak * 2);\n    var magnitude = Math.sqrt(tempX * tempX + tempY * tempY) || 1;\n    var vector = {\n      x: tempX / magnitude,\n      y: tempY / magnitude,\n      z: tempZ,\n      rotX: (Math.random() * 2 - 1) * Math.PI,\n      rotY: (Math.random() * 2 - 1) * Math.PI,\n      rotZ: (Math.random() * 2 - 1) * Math.PI\n    };\n    vectors.push(vector);\n  }\n\n  return vectors;\n};\n\nvar gaussianFunction = function gaussianFunction(x, peakBase, stdDev) {\n  var peakHeight = 1; // this is so we can later apply the intensity we want\n\n  var expNumerator = Math.pow(x - peakBase, 2);\n  var expDenominator = 2 * stdDev * stdDev;\n  var exponent = -expNumerator / expDenominator;\n  var result = peakHeight * Math.exp(exponent);\n  return result;\n};\n\nvar clampValue = function clampValue(value, min, max) {\n  return Math.min(max, Math.max(min, value));\n};\n\nexport { generateVectors, gaussianFunction, clampValue };","map":{"version":3,"sources":["/Users/gil/Projects/dominguesgm.github.io/src/shared/utils/index.js"],"names":["generateVectors","number","zDepth","peak","vectors","i","tempX","Math","random","tempY","tempZ","magnitude","sqrt","vector","x","y","z","rotX","PI","rotY","rotZ","push","gaussianFunction","peakBase","stdDev","peakHeight","expNumerator","pow","expDenominator","exponent","result","exp","clampValue","value","min","max"],"mappings":"AAAA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,MAAD,EAASC,MAAT,EAAiBC,IAAjB,EAA0B;AACjD,MAAMC,OAAO,GAAG,EAAhB;;AAEA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGJ,MAAnB,EAA2BI,CAAC,EAA5B,EAAgC;AAC/B,QAAMC,KAAK,GAAG,CAACC,IAAI,CAACC,MAAL,KAAgB,GAAjB,IAAwB,GAAtC;AACA,QAAMC,KAAK,GAAGF,IAAI,CAACC,MAAL,MAAiBH,CAAC,GAAG,CAAJ,KAAU,CAAV,GAAc,CAAd,GAAkB,CAAC,CAApC,CAAd;AACA,QAAMK,KAAK,GAAG,CAACR,MAAD,IAAWC,IAAI,GAAG,CAAlB,CAAd;AACA,QAAMQ,SAAS,GAAGJ,IAAI,CAACK,IAAL,CAAUN,KAAK,GAACA,KAAN,GAAcG,KAAK,GAACA,KAA9B,KAAwC,CAA1D;AAEA,QAAMI,MAAM,GAAG;AACdC,MAAAA,CAAC,EAAER,KAAK,GAAGK,SADG;AAEdI,MAAAA,CAAC,EAAEN,KAAK,GAAGE,SAFG;AAGdK,MAAAA,CAAC,EAAEN,KAHW;AAIdO,MAAAA,IAAI,EAAE,CAACV,IAAI,CAACC,MAAL,KAAgB,CAAhB,GAAoB,CAArB,IAA0BD,IAAI,CAACW,EAJvB;AAKdC,MAAAA,IAAI,EAAE,CAACZ,IAAI,CAACC,MAAL,KAAgB,CAAhB,GAAoB,CAArB,IAA0BD,IAAI,CAACW,EALvB;AAMdE,MAAAA,IAAI,EAAE,CAACb,IAAI,CAACC,MAAL,KAAgB,CAAhB,GAAoB,CAArB,IAA0BD,IAAI,CAACW;AANvB,KAAf;AASAd,IAAAA,OAAO,CAACiB,IAAR,CAAaR,MAAb;AACA;;AAED,SAAOT,OAAP;AACA,CAtBD;;AAwBA,IAAMkB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACR,CAAD,EAAIS,QAAJ,EAAcC,MAAd,EAAyB;AACjD,MAAMC,UAAU,GAAG,CAAnB,CADiD,CAC3B;;AACtB,MAAMC,YAAY,GAAGnB,IAAI,CAACoB,GAAL,CAASb,CAAC,GAAGS,QAAb,EAAuB,CAAvB,CAArB;AACA,MAAMK,cAAc,GAAG,IAAIJ,MAAJ,GAAaA,MAApC;AACA,MAAMK,QAAQ,GAAG,CAAEH,YAAF,GAAiBE,cAAlC;AACA,MAAME,MAAM,GAAGL,UAAU,GAAGlB,IAAI,CAACwB,GAAL,CAASF,QAAT,CAA5B;AAEA,SAAOC,MAAP;AACA,CARD;;AAUA,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAQC,GAAR,EAAaC,GAAb,EAAqB;AACvC,SAAO5B,IAAI,CAAC2B,GAAL,CAASC,GAAT,EAAc5B,IAAI,CAAC4B,GAAL,CAASD,GAAT,EAAcD,KAAd,CAAd,CAAP;AACA,CAFD;;AAIA,SACCjC,eADD,EAECsB,gBAFD,EAGCU,UAHD","sourcesContent":["const generateVectors = (number, zDepth, peak) => {\n\tconst vectors = [];\n\n\tfor(let i = 0; i < number; i++) {\n\t\tconst tempX = (Math.random() - 0.5) * 0.1;\n\t\tconst tempY = Math.random() * (i % 2 === 0 ? 1 : -1);\n\t\tconst tempZ = -zDepth / (peak * 2);\n\t\tconst magnitude = Math.sqrt(tempX*tempX + tempY*tempY) || 1;\n\n\t\tconst vector = {\n\t\t\tx: tempX / magnitude,\n\t\t\ty: tempY / magnitude,\n\t\t\tz: tempZ,\n\t\t\trotX: (Math.random() * 2 - 1) * Math.PI,\n\t\t\trotY: (Math.random() * 2 - 1) * Math.PI,\n\t\t\trotZ: (Math.random() * 2 - 1) * Math.PI,\n\t\t};\n\n\t\tvectors.push(vector);\n\t}\n\n\treturn vectors;\n};\n\nconst gaussianFunction = (x, peakBase, stdDev) => {\n\tconst peakHeight = 1; // this is so we can later apply the intensity we want\n\tconst expNumerator = Math.pow(x - peakBase, 2);\n\tconst expDenominator = 2 * stdDev * stdDev;\n\tconst exponent = - expNumerator / expDenominator;\n\tconst result = peakHeight * Math.exp(exponent);\n\n\treturn result;\n};\n\nconst clampValue = (value, min, max) => {\n\treturn Math.min(max, Math.max(min, value));\n};\n\nexport {\n\tgenerateVectors,\n\tgaussianFunction,\n\tclampValue,\n};\n"]},"metadata":{},"sourceType":"module"}