{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport laptopAsset from '../../../../media/files/laptop.glb';\n\nclass Laptop {\n  constructor(camera, scene) {\n    _defineProperty(this, \"isReady\", false);\n\n    _defineProperty(this, \"scene\", void 0);\n\n    _defineProperty(this, \"keyboard\", void 0);\n\n    _defineProperty(this, \"display\", void 0);\n\n    _defineProperty(this, \"displayMesh\", void 0);\n\n    this.camera = camera;\n    const loader = new GLTFLoader();\n    loader.load(laptopAsset, file => {\n      this.isReady = true;\n      this.scene = file.scene;\n      file.scene.children.forEach(element => {\n        if (element.name === 'keyboard') {\n          this.keyboard = element;\n        } else {\n          this.display = element;\n        }\n      });\n      this.displayMesh = this.display.children.find(child => child.name === 'display');\n      scene.add(file.scene);\n      file.scene.position.set(0, -window.innerHeight * 0.9, this.camera.zDepth);\n      this.keyboard.rotateX(Math.PI / 180 * 40);\n      this.display.rotateX(-(Math.PI / 180 * 85));\n    }); // TODO: Load textures\n  }\n\n  animate(time, mouse, enableInteraction) {// TODO: Create spin and open animation for entrance (triggered by a specific scrollY value)\n    // TODO: Create spin and change texture animation for project transition (triggered by a button/key press)\n    // TODO: Create spin and close animation for exit (triggered by a specific scrollY value)\n  }\n\n  onResize() {// reposition letters respective to new zDepth\n  }\n\n}\n\nexport default Laptop;","map":{"version":3,"sources":["/Users/gil/Projects/dominguesgm.github.io/src/shared/components/canvas/components/laptop/Laptop.js"],"names":["GLTFLoader","laptopAsset","Laptop","constructor","camera","scene","loader","load","file","isReady","children","forEach","element","name","keyboard","display","displayMesh","find","child","add","position","set","window","innerHeight","zDepth","rotateX","Math","PI","animate","time","mouse","enableInteraction","onResize"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,uCAA3B;AAEA,OAAOC,WAAP,MAAwB,oCAAxB;;AAEA,MAAMC,MAAN,CAAa;AAQZC,EAAAA,WAAW,CAACC,MAAD,EAASC,KAAT,EAAgB;AAAA,qCAPjB,KAOiB;;AAAA;;AAAA;;AAAA;;AAAA;;AAC1B,SAAKD,MAAL,GAAcA,MAAd;AAEA,UAAME,MAAM,GAAG,IAAIN,UAAJ,EAAf;AAEAM,IAAAA,MAAM,CAACC,IAAP,CAAYN,WAAZ,EAA0BO,IAAD,IAAU;AAClC,WAAKC,OAAL,GAAe,IAAf;AACA,WAAKJ,KAAL,GAAaG,IAAI,CAACH,KAAlB;AAEAG,MAAAA,IAAI,CAACH,KAAL,CAAWK,QAAX,CAAoBC,OAApB,CAA6BC,OAAD,IAAa;AACxC,YAAGA,OAAO,CAACC,IAAR,KAAiB,UAApB,EAAgC;AAC/B,eAAKC,QAAL,GAAgBF,OAAhB;AACA,SAFD,MAEO;AACN,eAAKG,OAAL,GAAeH,OAAf;AACA;AACD,OAND;AAQA,WAAKI,WAAL,GAAmB,KAAKD,OAAL,CAAaL,QAAb,CAAsBO,IAAtB,CAA4BC,KAAD,IAAWA,KAAK,CAACL,IAAN,KAAe,SAArD,CAAnB;AACAR,MAAAA,KAAK,CAACc,GAAN,CAAUX,IAAI,CAACH,KAAf;AACAG,MAAAA,IAAI,CAACH,KAAL,CAAWe,QAAX,CAAoBC,GAApB,CAAwB,CAAxB,EAA2B,CAACC,MAAM,CAACC,WAAR,GAAoB,GAA/C,EAAoD,KAAKnB,MAAL,CAAYoB,MAAhE;AACA,WAAKV,QAAL,CAAcW,OAAd,CAAuBC,IAAI,CAACC,EAAL,GAAU,GAAX,GAAkB,EAAxC;AACA,WAAKZ,OAAL,CAAaU,OAAb,CAAqB,EAAGC,IAAI,CAACC,EAAL,GAAU,GAAX,GAAkB,EAApB,CAArB;AACA,KAjBD,EAL0B,CA2B1B;AAEA;;AAEDC,EAAAA,OAAO,CAACC,IAAD,EAAOC,KAAP,EAAcC,iBAAd,EAAiC,CACvC;AAEA;AAEA;AACA;;AAEDC,EAAAA,QAAQ,GAAG,CACV;AACA;;AAjDW;;AAoDb,eAAe9B,MAAf","sourcesContent":["import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\n\nimport laptopAsset from '../../../../media/files/laptop.glb';\n\nclass Laptop {\n\tisReady = false;\n\tscene;\n\tkeyboard;\n\tdisplay;\n\tdisplayMesh;\n\n\n\tconstructor(camera, scene) {\n\t\tthis.camera = camera;\n\n\t\tconst loader = new GLTFLoader();\n\n\t\tloader.load(laptopAsset, (file) => {\n\t\t\tthis.isReady = true;\n\t\t\tthis.scene = file.scene;\n\n\t\t\tfile.scene.children.forEach((element) => {\n\t\t\t\tif(element.name === 'keyboard') {\n\t\t\t\t\tthis.keyboard = element;\n\t\t\t\t} else {\n\t\t\t\t\tthis.display = element;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.displayMesh = this.display.children.find((child) => child.name === 'display');\n\t\t\tscene.add(file.scene);\n\t\t\tfile.scene.position.set(0, -window.innerHeight*0.9, this.camera.zDepth);\n\t\t\tthis.keyboard.rotateX((Math.PI / 180) * 40);\n\t\t\tthis.display.rotateX(-((Math.PI / 180) * 85));\n\t\t});\n\n\n\n\n\t\t// TODO: Load textures\n\n\t}\n\n\tanimate(time, mouse, enableInteraction) {\n\t\t// TODO: Create spin and open animation for entrance (triggered by a specific scrollY value)\n\n\t\t// TODO: Create spin and change texture animation for project transition (triggered by a button/key press)\n\n\t\t// TODO: Create spin and close animation for exit (triggered by a specific scrollY value)\n\t}\n\n\tonResize() {\n\t\t// reposition letters respective to new zDepth\n\t}\n}\n\nexport default Laptop;\n"]},"metadata":{},"sourceType":"module"}