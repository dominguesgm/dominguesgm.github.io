{"ast":null,"code":"import { MeshLambertMaterial, Mesh, TextGeometry } from 'three';\n\nconst Text = function (text, material, options) {\n  this.text = text;\n  this.options = options;\n  this.material = material || new MeshLambertMaterial({\n    color: 0xf7f7f2\n  });\n  this.letterMeshes = [];\n  let offsetX = 0;\n  const scale = this.options.fontSize / this.options.font.data.resolution;\n\n  for (let i = 0; i < text.length; i++) {\n    const name = new TextGeometry(text[i], {\n      font: this.options.font,\n      size: this.options.fontSize,\n      height: this.options.fontExtrusion,\n      curveSegments: this.options.curveSegments\n    });\n    const letterWidth = this.options.font.data.glyphs[text[i]].ha * scale;\n    const letterHeight = this.options.fontSize;\n    const letterDepth = this.options.fontExtrusion; // Try to center letters before building text\n\n    name.translate(-letterWidth / 2, -letterHeight / 2, -letterDepth / 2);\n    const mesh = new Mesh(name, this.material);\n    this.letterMeshes.push({\n      mesh,\n      transX: offsetX + letterWidth / 2,\n      transY: 0,\n      transZ: 0,\n      posX: 0,\n      posY: 0,\n      posZ: 0\n    }); // To understand why we do this, please see create path function of Threejs's Font implementation (glyph width * font scale)\n\n    offsetX += letterWidth;\n  }\n\n  this.width = offsetX;\n  this.height = this.options.fontSize;\n\n  this.addToScene = function (scene) {\n    this.letterMeshes.forEach(letter => scene.add(letter.mesh));\n  };\n\n  this.setPosition = function (x, y, z) {\n    this.letterMeshes.forEach(letter => {\n      letter.posX = x;\n      letter.posY = y;\n      letter.posZ = z;\n      letter.mesh.position.set(x, y, z);\n    });\n  };\n};\n\nexport default Text;","map":{"version":3,"sources":["/Users/gil/Projects/dominguesgm.github.io/src/shared/components/canvas/components/name/helpers/Text.js"],"names":["MeshLambertMaterial","Mesh","TextGeometry","Text","text","material","options","color","letterMeshes","offsetX","scale","fontSize","font","data","resolution","i","length","name","size","height","fontExtrusion","curveSegments","letterWidth","glyphs","ha","letterHeight","letterDepth","translate","mesh","push","transX","transY","transZ","posX","posY","posZ","width","addToScene","scene","forEach","letter","add","setPosition","x","y","z","position","set"],"mappings":"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","sourcesContent":["import {\n\tMeshLambertMaterial,\n\tMesh,\n\tTextGeometry,\n} from 'three';\n\nconst Text = function (text, material, options) {\n\tthis.text = text;\n\tthis.options = options;\n\tthis.material = material || new MeshLambertMaterial( { color: 0xf7f7f2 } );\n\tthis.letterMeshes = [];\n\n\tlet offsetX = 0;\n\tconst scale = this.options.fontSize / this.options.font.data.resolution;\n\n\tfor(let i = 0; i < text.length; i++) {\n\t\tconst name = new TextGeometry(text[i], {\n\t\t\tfont: this.options.font,\n\t\t\tsize: this.options.fontSize,\n\t\t\theight: this.options.fontExtrusion,\n\t\t\tcurveSegments: this.options.curveSegments,\n\t\t});\n\n\t\tconst letterWidth = this.options.font.data.glyphs[text[i]].ha * scale;\n\t\tconst letterHeight = this.options.fontSize;\n\t\tconst letterDepth = this.options.fontExtrusion;\n\n\t\t// Try to center letters before building text\n\t\tname.translate(-letterWidth/2, -letterHeight/2, -letterDepth/2);\n\n\t\tconst mesh = new Mesh(name, this.material);\n\n\t\tthis.letterMeshes.push({\n\t\t\tmesh,\n\t\t\ttransX: offsetX + letterWidth/2,\n\t\t\ttransY: 0,\n\t\t\ttransZ: 0,\n\t\t\tposX: 0,\n\t\t\tposY: 0,\n\t\t\tposZ: 0,\n\t\t});\n\n\t\t// To understand why we do this, please see create path function of Threejs's Font implementation (glyph width * font scale)\n\t\toffsetX += letterWidth;\n\t}\n\n\tthis.width = offsetX;\n\tthis.height = this.options.fontSize;\n\n\tthis.addToScene = function (scene) {\n\t\tthis.letterMeshes.forEach((letter) => scene.add(letter.mesh));\n\t};\n\n\tthis.setPosition = function (x, y, z) {\n\t\tthis.letterMeshes.forEach((letter) => {\n\t\t\tletter.posX = x;\n\t\t\tletter.posY = y;\n\t\t\tletter.posZ = z;\n\t\t\tletter.mesh.position.set(x, y, z);\n\t\t});\n\t};\n};\n\nexport default Text;\n"]},"metadata":{},"sourceType":"module"}